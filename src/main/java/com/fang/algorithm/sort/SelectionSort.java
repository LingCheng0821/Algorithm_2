package com.fang.algorithm.sort;

/**
 * 1、选择排序的工作原理很容易理解：
 *      初始时在序列中找到最小（大）元素，放到序列的起始位置作为已排序序列；
 *      然后，再从剩余未排序元素中继续寻找最小（大）元素，放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。
 *
 * 2、注意选择排序与冒泡排序的区别：
 *      冒泡排序通过依次交换相邻两个顺序不合法的元素位置，从而将当前最小（大）元素放到合适的位置；
 *      而选择排序每遍历一次都记住了当前最小（大）元素的位置，最后仅需一次交换操作即可将其放到合适的位置。
 */
public class SelectionSort {
    // 分类 -------------- 内部比较排序
    // 数据结构 ---------- 数组
    // 最差时间复杂度 ---- O(n^2)
    // 最优时间复杂度 ---- O(n^2)
    // 平均时间复杂度 ---- O(n^2)
    // 所需辅助空间 ------ O(1)
    // 稳定性 ------------ 不稳定

    // 排序前：     { 6, 5, 3, 1, 8, 7, 2, 4 }
    // 第一遍排序： { 1, 5, 3, 6, 8, 7, 2, 4 }  找出最小的，和第一位置上交换
    // 第二遍排序： { 1, 2, 3, 6, 8, 7, 5, 4 }  找出第二小的，和第二个位置上交换

    void Swap(int A[], int i, int j) {
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }

    void SelectionSort(int A[], int n)  {
        for (int i = 0; i < n - 1; i++)  {       // i为已排序序列的末尾
            int min = i;
            for (int j = i + 1; j < n; j++)  {    // 未排序序列
                if (A[j] < A[min])   {            // 找出未排序序列中的最小值
                    min = j;
                }
            }
            if (min != i)  {
                Swap(A, min, i);    // 放到已排序序列的末尾，该操作很有可能把稳定性打乱，所以选择排序是不稳定的排序算法
            }
        }
    }

}
