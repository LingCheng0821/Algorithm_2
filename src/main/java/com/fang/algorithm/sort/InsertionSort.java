package com.fang.algorithm.sort;

/**
 * 插入排序
 * <p>
 * 1、工作原理
 * 对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。
 * 插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。
 * <p>
 * 2、具体算法描述如下：
 * ①从第一个元素开始，该元素可以认为已经被排序；
 * ②取出下一个元素，在已经排序的元素序列中从后向前扫描
 * ③如果该元素（已排序）大于新元素，将该元素移到下一位置
 * ④重复步骤3，直到找到已排序的元素小于或者等于新元素的位置
 * ⑤将新元素插入到该位置后
 * ⑥重复步骤2~5
 */
public class InsertionSort {
    // 分类 ------------- 内部比较排序
    // 数据结构 ---------- 数组
    // 最差时间复杂度 ---- 最坏情况为输入序列是降序排列的,此时时间复杂度O(n^2)
    // 最优时间复杂度 ---- 最好情况为输入序列是升序排列的,此时时间复杂度O(n)
    // 平均时间复杂度 ---- O(n^2)
    // 所需辅助空间 ------ O(1)
    // 稳定性 ------------ 稳定

    // 排序前：     { 6, 5, 3, 1, 8, 7, 2, 4 }
    // 第一遍排序： { 5, 6, 3, 1, 8, 7, 2, 4 }  找到第两个数的位置，先将前两个排好序
    // 第二遍排序： { 3, 5, 6, 1, 8, 7, 2, 4 }  找到第三个数的位置，排好前三个数的顺序

    void InsertionSort(int A[], int n) {
        for (int i = 1; i < n; i++) {        // 类似抓扑克牌排序
            int get = A[i];                 // 右手抓到一张扑克牌
            int j = i - 1;                  // 拿在左手上的牌总是排序好的
            while (j >= 0 && A[j] > get) {   // 将抓到的牌与手牌从右向左进行比较
                A[j + 1] = A[j];            // 如果该手牌比抓到的牌大，就将其右移
                j--;
            }
            // 直到该手牌比抓到的牌小(或二者相等)，将抓到的牌插入到该手牌右边(相等元素的相对次序未变，所以插入排序是稳定的)
            A[j + 1] = get;
        }
    }


    /**
     * 插入排序的改进：二分插入排序
     *      采用二分查找法来减少比较操作的次数
     *
     *  当n较大时，二分插入排序的比较次数比直接插入排序的最差情况好得多，但比直接插入排序的最好情况要差，
     *  所当以元素初始序列已经接近升序时，直接插入排序比二分插入排序比较次数少。二分插入排序元素移动次数与直接插入排序相同，依赖于元素初始序列。
     *
     * 分类 -------------- 内部比较排序
     * 数据结构 ---------- 数组
     * 最差时间复杂度 ---- O(n^2)
     * 最优时间复杂度 ---- O(nlogn)
     * 平均时间复杂度 ---- O(n^2)
     * 所需辅助空间 ------ O(1)
     * 稳定性 ------------ 稳定
    */
    void InsertionSortDichotomy(int A[], int n) {
        for (int i = 1; i < n; i++)  {
            int get = A[i];

            int left = 0;    // 采用二分法定位新牌的位置
            int right = i - 1;
            while (left <= right)   {
                int mid = (left + right) / 2;
                if (A[mid] > get)
                    right = mid - 1;
                else
                    left = mid + 1;
            }
            for (int j = i - 1; j >= left; j--) {   // 将欲插入新牌位置右边的牌整体向右移动一个单位
                A[j + 1] = A[j];
            }
            A[left] = get;                    // 将抓到的牌插入手牌
        }
    }

    public static void main(String[] args) {
        int[] A= { 6, 5, 3, 1, 8, 7, 2, 4 };// 从小到大二分插入排序
        int n = A.length;
        new InsertionSort().InsertionSort(A, n);
        System.out.println("二分插入排序结果： ");
        System.out.print("{ ");
        for (int i = 0; i < n; i++) {
            System.out.print(A[i] + "   ");
        }
        System.out.println("} ");
    }
}
