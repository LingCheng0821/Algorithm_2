package com.fang.algorithm.sort;

/**
 * 插入排序的更高效改进：希尔排序(Shell Sort)
 * <p>
 * 希尔排序，也叫递减增量排序，是插入排序的一种更高效的改进版本。希尔排序是不稳定的排序算法。
 * <p>
 * 希尔排序是基于插入排序的以下两点性质而提出改进方法的：
 * 插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率
 * 但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位
 * 希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。
 * 然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。
 */
public class ShellSort {
    // 分类 -------------- 内部比较排序
    // 数据结构 ---------- 数组
    // 最差时间复杂度 ---- 根据步长序列的不同而不同。已知最好的为O(n(logn)^2)
    // 最优时间复杂度 ---- O(n)
    // 平均时间复杂度 ---- 根据步长序列的不同而不同。
    // 所需辅助空间 ------ O(1)
    // 稳定性 ------------ 不稳定

    // 排序前：     { 6, 5, 3, 1, 8, 7, 2, 4 }
    // 第一遍排序： { 6, 5, 3, 1, 8, 7, 2, 4 }  找到第两个数的位置，先将前两个排好序  h=13
    // 第二遍排序： { 6, 5, 2, 1, 8, 7, 3, 4 }  找到第三个数的位置，排好前三个数的顺序 h=4
    // 第三遍排序： h=1
        // { 5, 6, 2, 1, 8, 7, 3, 4 }
        // { 2, 5, 6, 1, 8, 7, 3, 4 }
        // { 1, 2, 5, 6, 8, 7, 3, 4 }
        // { 1, 2, 3, 5, 6, 8, 7, 4 }
        // { 1, 2, 3, 4, 5, 6, 8, 7 }
        // { 1, 2, 3, 4, 5, 6, 7, 8 }
    void ShellSort(int A[], int n) {
        int h = (n-1) / 3 ;

        while (h >= 1) {
            for (int i = h; i < n; i++) {  // i 是后一半
                int j = i - h;    //j 是后一半
                int get = A[i];   //
                while (j >= 0 && A[j] > get) {
                    A[j + h] = A[j];
                    j = j - h;
                }
                A[j + h] = get;
            }
            h = (n-1) / 3;                    // 递减增量
        }
    }


    public static void main(String[] args) {
        int[] A= { 6, 5, 3, 1, 8, 7, 2, 4 };// 从小到大二分插入排序
        int n = A.length;
        new ShellSort().ShellSort(A, n);
        System.out.println("希尔排序结果： ");
        System.out.print("{ ");
        for (int i = 0; i < n; i++) {
            System.out.print(A[i] + "   ");
        }
        System.out.println("} ");
    }

}
